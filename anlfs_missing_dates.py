# -*- coding: utf-8 -*-
"""ANLFS_Missing_Dates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TkUlFhH2E2U1R7-Y38aZc35AGXbbZACy
"""

# Run this first to download necessary code capabilities. Only needs to be done once per session
!pip install xlsxwriter

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import xlsxwriter
from google.colab import files

# Read the Excel file
# Column A: Associate First Name
# Column B: Client First Name
# Column C: Client First Name
# Column D: Client Last Name
# Column F Cell 4: Date #1
# ...
# Column I Cell 4: Date #5
# The sheet must be in this format or modifications must be made.
file_name = '3_24_24-3_30_24 (11).xlsx'  # Ensure this matches the file name
df = pd.ExcelFile(file_name)
pivot_table_sheet_name = "Usage Pivot Table Raw" # Ensure this matches the pivot table sheet name in the file
caseloads_sheet_name = "Caseloads" # Ensure this matches the associate client mapping sheet name in the file

# Checks if the specified sheet exists in the Excel file. If it exists, read data from the sheet. Else, throw an error.
if(pivot_table_sheet_name not in df.sheet_names):
  raise Exception (f'{pivot_table_sheet_name} was not in the list of sheets in this excel. List of sheets: {df.sheet_names}')
if(caseloads_sheet_name not in df.sheet_names):
  raise Exception (f'{caseloads_sheet_name} was not in the list of sheets in this excel. List of sheets: {df.sheet_names}')
pivot_table = df.parse(pivot_table_sheet_name)
caseloads = df.parse(caseloads_sheet_name)


# Create an empty dictionary to store the names and their missing dates
# Dictionary looks like {key:value, key:value, key:value}
# Example: {"James Moore": [3/22, 3/24], "Michael Johnson: [3/22]"..etc}
missing_dates_dict = {}
# Create an empty dictionary that will store client names with their list of associates working with them
# Example: {"James Moore": ["Madison Smith", "John"], "Chris Jones": ["Richard Fairbank"]}
client_to_associate_dict = {}
# Variable to keep track of current associate's name
associate_name = ''

# New addition: This section will create a dictionary of clients and associates.
# {"James Moore": False, "Chris Jones": False}. False as in they have not been found yet
client_caseload_dict = {}
associate_caseload_dict = {}
for row_index in range(1, caseloads.shape[0]):
  associate_caseload_dict[caseloads.iloc[row_index, 0].strip()] = False
for row_index in range(1, caseloads.shape[0]):
  client_caseload_dict[caseloads.iloc[row_index, 1].strip()] = False
  print(caseloads.iloc[row_index,1])

# Go through each row of the sheet from 1 (not including the header at 0) to the end. pivot_table.shape[0] returns the number of rows in the sheet
for row_index in range(1, pivot_table.shape[0]):
  # Get the client name from Column B and C. The if checks for empty names and ignores them. A row requires either a first or last name
  first_name = (pivot_table.iloc[row_index, 2]) # Jaylyne
  last_name =  (pivot_table.iloc[row_index, 3]) # Robinson
  if not pd.isnull(first_name) or not pd.isnull(last_name):
    full_name = f'{first_name.strip()} {last_name.strip()}'

    # Update the client caseload dictionary by removing the name if it is present
    print(full_name)
    if full_name in client_caseload_dict.keys():
      del client_caseload_dict[full_name]

    # Create an empty list to store the missing dates for this client
    missing_dates = []

    # Check for missing values the column that contains dates (E to I), corresponding to (4 to 9)
    for col in range(5, 10): # (5,10) for one week export, (10,15) for two week export where the second week is the week of interest
      units = pivot_table.iloc[row_index, col]
      if pd.isnull(units): # If that cell is empty/null, add the date to the list
        missing_dates.append(pivot_table.iloc[0, col]) # Dates are in row 0

    # Update the associate's name if the cell is not empty and does not contain "Total"
    associate_cell = pivot_table.iloc[row_index, 0]
    if not pd.isnull(associate_cell) and 'Total' not in associate_cell:
      associate_name = f'{pivot_table.iloc[row_index, 0]} {pivot_table.iloc[row_index, 1]}'
      # Update the associate dictionary that this name was found
      if associate_name in associate_caseload_dict.keys():
        del associate_caseload_dict[associate_name]

    # If the list of missing dates is not empty, add it to the dictionary with the name as the key ['James Madison' : ['3/24']]
    if missing_dates:
      # If the name already exists in the dictionary, this means they already have a list of missing dates from an associate previously.
      # Compare the previous list to the current list. If any dates match, it means they're missing from both associates.
      # Example: Michael Johnson's name is already in the dictionary with a list of dates [3/22, 3/23, 3/24]
      # The new list of missing dates we have from this associate is [3/22], which means 3/23 and 3/24 is filled in for this associate
      # With the only similarity being 3/22, then we will add 3/22 to the missing dates list since it's missing from both associates.
      if full_name in missing_dates_dict.keys():
        # Get the old list
        old_missing_dates_list = missing_dates_dict[full_name] # [3/22, 3/23, 3/24]
        missing_dates = list(set(old_missing_dates_list) & set(missing_dates)) # Creates a list of overlap between new and old dates
      # If the list of missing dates is not empty, there are missing dates. Add those dates to the client dictionary
      # Add the associate name to the client dictionary
      if missing_dates:
        missing_dates_dict[full_name] = missing_dates
        # If the client isn't in the associate dictionary, we will create a new list entry. Else, we will add it to the existing list.
        if full_name not in client_to_associate_dict.keys():
          client_to_associate_dict[full_name] = []
        # If the associate is not in the existing list, then add their name to the client key
        if associate_name not in client_to_associate_dict[full_name]:
          client_to_associate_dict[full_name].append(associate_name)
      else: # if the list is now empty, as in there are no actual missing dates when cross-compared, remove the client from both dictionaries if it exists
        if full_name in missing_dates_dict:
          del missing_dates_dict[full_name]
        if full_name in client_to_associate_dict:
          del client_to_associate_dict[full_name]


# Creates a new excel file to save the missing dates data
file_name = file_name.replace(".xlsx", "")
workbook = xlsxwriter.Workbook(f'{file_name}_missing_dates.xlsx')
worksheet = workbook.add_worksheet()

# Write the headers with bold format
bold_format = workbook.add_format({'bold': True})
worksheet.write('A1', 'Associate Name', bold_format)
worksheet.write('B1', 'Client Name', bold_format)
worksheet.write('C1', 'Missing Dates', bold_format)
worksheet.write('E1', 'Missing Associates', bold_format)
worksheet.write('F1', 'Missing Clients', bold_format)

# Set column widths for better spacing
worksheet.set_column('A:A', 20)
worksheet.set_column('B:B', 30)
worksheet.set_column('C:C', 50)
worksheet.set_column('E:E', 30)
worksheet.set_column('F:F', 30)


# For every client in our missing dates dictionary, we will add a new row to the excel file with their associates, their name, and their missing dates
row_count = 2
for full_name in missing_dates_dict.keys():
  worksheet.write(f'A{row_count}', ', '.join(client_to_associate_dict[full_name])) #associates with this client in column A
  worksheet.write(f'B{row_count}', full_name) # full name in column B
  worksheet.write(f'C{row_count}', ', '.join(missing_dates_dict[full_name])) #missing dates in column C
  row_count = row_count + 1 #increase our row count

# For every name still present in the associate caseload dictionary and the client caseload dictionary, this will append them to Column E and F
row_count = 2
for associate_name in associate_caseload_dict.keys():
  worksheet.write(f'E{row_count}', associate_name)
  row_count = row_count + 1

row_count = 2
for client_name in client_caseload_dict.keys():
  worksheet.write(f'F{row_count}', client_name)
  row_count = row_count + 1


# Close the workbook and initiate the download
workbook.close()
files.download(f'{file_name}_missing_dates.xlsx')